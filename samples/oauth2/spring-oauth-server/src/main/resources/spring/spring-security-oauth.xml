<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:oauth2="http://www.springframework.org/schema/security/oauth2"
	xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:security="http://www.springframework.org/schema/security"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans.xsd 
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd 
		http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd 
		http://www.springframework.org/schema/security/oauth2  http://www.springframework.org/schema/security/spring-security-oauth2.xsd">


	<!-- Spring Security + OAuth 的主配置文件 -->

	<!-- 若需要调试, 可将debug 标签注释取消 -->
	<!--<debug/> -->
	<!-- 静态资源, 忽略 -->
	<!--static url pattern -->
	<security:http pattern="/resources/**" security="none" />
	<security:http pattern="/oauth2/rest_token" security="none" />
	<!-- Oauth server start............. https://github.com/spring-projects/spring-security-oauth/blob/master/docs/oauth2.md -->
    <!--
        Spring MVC的注解配置, 注意: 该配置不能放置在 mkk-servlet.xml 文件中
    -->
	<!--     
	<mvc:annotation-driven/>
    <mvc:default-servlet-handler/> -->

	<!-- OAuth2 URL: /oauth/token 的处理与配置 一般使用时这里不需要修改, 直接使用即可 -->
	<security:http pattern="/oauth2/token" create-session="stateless" 
		authentication-manager-ref="oauth2AuthenticationManager"
		entry-point-ref="oauth2AuthenticationEntryPoint" use-expressions="false">
		<security:intercept-url pattern="/oauth2/token" access="IS_AUTHENTICATED_FULLY" />
		<security:anonymous enabled="false" />
		<security:http-basic entry-point-ref="oauth2AuthenticationEntryPoint" />
		<security:custom-filter ref="clientCredentialsTokenEndpointFilter" before="BASIC_AUTH_FILTER" />
		<security:access-denied-handler ref="oauth2AccessDeniedHandler" />
		<security:csrf disabled="true" />
	</security:http>

	<!-- 处理grant_type=client_credentials 的逻辑 只从请求中获取client_id与client_secret -->
	<bean id="clientCredentialsTokenEndpointFilter" class="org.springframework.security.oauth2.provider.client.ClientCredentialsTokenEndpointFilter">
		<property name="authenticationManager" ref="oauth2AuthenticationManager" />
		<property name="filterProcessesUrl" value="/oauth2/token" />
	</bean>

	<!-- 对具体的资源(resource)的安全配置逻辑, 包括ROLE, Scope等 可根据具体的需求添加, 每一类URL pattern 
		对应具体的resource /unity/** 处理资源 unityResourceServer /m/** 处理资源 mobileResourceServer -->
	<!--unity http configuration -->
	<security:http pattern="/unity/**" create-session="never"
		entry-point-ref="oauth2AuthenticationEntryPoint"
		access-decision-manager-ref="oauth2AccessDecisionManager"
		use-expressions="false">
		<security:anonymous enabled="false" />

		<security:intercept-url pattern="/unity/**" access="ROLE_UNITY,SCOPE_READ" />

		<security:custom-filter ref="unityResourceServer" before="PRE_AUTH_FILTER" />
		<security:access-denied-handler ref="oauth2AccessDeniedHandler" />
		<security:csrf disabled="true" />
	</security:http>

	<!--mobile http configuration -->
	<security:http pattern="/m/**" create-session="never"
		entry-point-ref="oauth2AuthenticationEntryPoint"
		access-decision-manager-ref="oauth2AccessDecisionManager"
		use-expressions="false">
		<security:anonymous enabled="false" />
        <security:intercept-url pattern="/m/**" access="ROLE_MOBILE,SCOPE_READ"/>
		<security:custom-filter ref="mobileResourceServer" before="PRE_AUTH_FILTER" />
		<security:access-denied-handler ref="oauth2AccessDeniedHandler" />
		<security:csrf disabled="true" />
	</security:http>

	<!-- 每一个资源(resource)的定义, resource-id必须唯一, OauthClientDetails中的resourceIds属性的值由此来的, 
		允许一个Client有多个resource-id, 由逗号(,)分隔 每一个定义会在Security Flow中添加一个位于 PRE_AUTH_FILTER 
		之前的Filter -->
	<!--unity resource server filter 资源filter配置-->
	<oauth2:resource-server  id="unityResourceServer" resource-id="unity-resource" token-services-ref="tokenServices" />
	<oauth2:resource-server id="mobileResourceServer" resource-id="mobile-resource" token-services-ref="tokenServices" />

	<!--Config ClientDetailsService -->
<!-- 	<oauth2:client-details-service id="clientDetailsService">
		<oauth2:client client-id="unity-client" resource-ids="unity-resource"
			authorized-grant-types="password,authorization_code,refresh_token,implicit"
			secret="unity" authorities="ROLE_UNITY" scope="read,write" />
		<oauth2:client client-id="mobile-client" resource-ids="mobile-resource"
			authorized-grant-types="password,authorization_code,refresh_token,implicit"
			secret="mobile" authorities="ROLE_MOBILE" scope="read,write" />
	</oauth2:client-details-service> -->

	<!-- 管理 ClientDetails -->
	<bean id="clientDetailsService" class="com.monkeyk.sos.domain.oauth.CustomJdbcClientDetailsService">
		<constructor-arg index="0" ref="dataSource" />
	</bean>

	<!--Config token services -->
	<!--<bean id="tokenStore" class="org.springframework.security.oauth2.provider.token.InMemoryTokenStore"/> -->
	<bean id="tokenStore" class="com.monkeyk.sos.domain.oauth.CustomJdbcTokenStore">
		<constructor-arg index="0" ref="dataSource" />
	</bean>

	<!-- 在访问资源的时候验证Access Token -->
	<bean id="tokenServices" class="org.springframework.security.oauth2.provider.token.DefaultTokenServices">
		<property name="tokenStore" ref="tokenStore" />
		<property name="clientDetailsService" ref="clientDetailsService" />
		<property name="supportRefreshToken" value="true" />
		<!-- <property name="accessTokenValiditySeconds" value="30"/> -->
	</bean>

	<!--<global-method-security pre-post-annotations="enabled" proxy-target-class="true"> -->
	<!--<expression-handler ref="oauth2ExpressionHandler"/> -->
	<!--</global-method-security> -->

	<!--<oauth2:expression-handler id="oauth2ExpressionHandler"/> -->
	<!--<oauth2:web-expression-handler id="oauth2WebExpressionHandler"/> -->

	<bean
		class="org.springframework.security.oauth2.provider.request.DefaultOAuth2RequestFactory"
		id="oAuth2RequestFactory">
		<constructor-arg name="clientDetailsService" ref="clientDetailsService" />
	</bean>

	<bean id="oauthUserApprovalHandler"
		class="com.monkeyk.sos.web.oauth.OauthUserApprovalHandler">
		<property name="tokenStore" ref="tokenStore" />
		<property name="clientDetailsService" ref="clientDetailsService" />
		<property name="requestFactory" ref="oAuth2RequestFactory" />
		<property name="oauthService" ref="oauthService" />
	</bean>

	<!-- 管理 Authorization code -->
	<!--<bean id="jdbcAuthorizationCodeServices" -->
	<!--class="org.springframework.security.oauth2.provider.code.JdbcAuthorizationCodeServices"> -->
	<!--<beans:constructor-arg index="0" ref="dataSource"/> -->
	<!--</bean> -->
	<bean id="jdbcAuthorizationCodeServices"
		class="com.monkeyk.sos.infrastructure.jdbc.SOSAuthorizationCodeServices">
		<constructor-arg index="0" ref="dataSource" />
	</bean>

	<!-- Security OAuth Flow的核心配置 每一个配置对应一类具体的grant_type 可根据需求删除或禁用, 如: <oauth2:implicit 
		disabled="true"/> 默认支持OAuth2提供的5类grant_type, 若不需要任何一类, 将其配置注释掉(或删掉)即可. 若需要自定义 
		authorization url, 在 <oauth2:authorization-server > 配置中添加authorization-endpoint-url,如: 
		authorization-endpoint-url="/oauth2/authorization" 若需要自定义 token url, 在 <oauth2:authorization-server 
		> 配置中添加token-endpoint-url配置, 如:token-endpoint-url="/oauth2/my_token" -->
	<oauth2:authorization-server
		client-details-service-ref="clientDetailsService" token-services-ref="tokenServices"
		user-approval-handler-ref="oauthUserApprovalHandler"
		user-approval-page="oauth_approval" error-page="oauth_error"
		authorization-endpoint-url="/oauth2/authorize" token-endpoint-url="/oauth2/token" >
		<oauth2:authorization-code authorization-code-services-ref="jdbcAuthorizationCodeServices" />
		<oauth2:implicit />
		<oauth2:refresh-token />
		<oauth2:client-credentials />
		<oauth2:password />
	</oauth2:authorization-server>

	<bean id="oauth2AuthenticationEntryPoint"
		class="org.springframework.security.oauth2.provider.error.OAuth2AuthenticationEntryPoint" />

	<bean id="oauth2ClientDetailsUserService"
		class="org.springframework.security.oauth2.provider.client.ClientDetailsUserDetailsService">
		<constructor-arg ref="clientDetailsService" />
	</bean>

	<security:authentication-manager id="oauth2AuthenticationManager">
		<security:authentication-provider user-service-ref="oauth2ClientDetailsUserService" />
	</security:authentication-manager>

	<!-- 扩展Spring Security 默认的 AccessDecisionManager 添加对OAuth中 scope 的检查与校验 -->
	<bean id="oauth2AccessDecisionManager" class="org.springframework.security.access.vote.UnanimousBased">
		<constructor-arg>
			<list>
				<bean class="org.springframework.security.oauth2.provider.vote.ScopeVoter" />
				<bean class="org.springframework.security.access.vote.RoleVoter" />
				<bean class="org.springframework.security.access.vote.AuthenticatedVoter" />
			</list>
		</constructor-arg>
	</bean>

	<bean id="oauth2AccessDeniedHandler" class="org.springframework.security.oauth2.provider.error.OAuth2AccessDeniedHandler">
		<property name="exceptionRenderer" ref="custom_OAuth2ExceptionRenderer"/>
	</bean>


	<!-- 
		IS_AUTHENTICATED_ANONYMOUSLY 允许匿名用户进入
		IS_AUTHENTICATED_FULLY 允许登录用户进入
		IS_AUTHENTICATED_REMEMBERED 允许登录用户和rememberMe用户进入 -->
	<security:http disable-url-rewriting="true" use-expressions="false"
		authentication-manager-ref="authenticationManager">
		<security:intercept-url pattern="/oauth2/**" access="ROLE_USER,ROLE_UNITY,ROLE_MOBILE" />
		<security:intercept-url pattern="/**" access="IS_AUTHENTICATED_ANONYMOUSLY" />
		<security:form-login authentication-failure-url="/login.jsp?authentication_error=1"
			default-target-url="/index.jsp" login-page="/login.jsp"
			login-processing-url="/login.do" />
		<security:logout logout-success-url="/index.jsp" logout-url="/logout.do" />
		<security:access-denied-handler error-page="/login.jsp?authorization_error=2" />
		<security:anonymous />
		<security:csrf disabled="true" />
	</security:http>


	<security:authentication-manager alias="authenticationManager">
		<security:authentication-provider user-service-ref="userService">
			<security:password-encoder hash="md5" />
		</security:authentication-provider>
	</security:authentication-manager>

	<!-- Oauth server end............. -->

</beans>